{"mappings":"ACAA,CACE,MAAM,UAAsB,YAC1B,WAAW,oBAAqB,CAC9B,MAAO,CACL,gBACA,aACA,iBACA,YACA,aACA,MACD,AACH,CAEA,OAAO,qBAAuB,2BAA4B,AAC1D,QAAO,gBAAkB,sBAAuB,AAChD,QAAO,wBAA0B,CAAC,CAAC,EAAE,EAAc,oBAAoB,CAAC,CAAC,AAAC,AAC1E,QAAO,mBAAqB,CAAC,CAAC,EAAE,EAAc,eAAe,CAAC,CAAC,AAAC,AAEhE,cAAc,CACZ,KAAK,GACL,IAAI,CAAC,YAAY,CAAC,CAAE,KAAM,MAAO,EACnC,CAEA,KAAK,CAAI,CAAE,CAAY,CAAE,CACvB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAS,CACpC,CAEA,IAAI,UAAW,CACb,IAAM,EAAgB,IAAI,CAAC,IAAI,CAAC,gBAAiB,OAC3C,EAAa,IAAI,CAAC,IAAI,CAAC,aAAc,WACrC,EAAiB,IAAI,CAAC,IAAI,CAAC,iBAAkB,cAC7C,EAAM,IAAI,CAAC,IAAI,CAAC,MAAO,KAE7B,MAAO,CAAC;;;;;YAKF,EAAE,EAAc,uBAAuB,CAAC;;;;;8BAKtB,EAAE,EAAc;2BACnB,EAAE,EAAW;+BACT,EAAE,EAAe;mBAC7B,EAAE,EAAI;;;;;;cAMX,EAAE,EAAc,uBAAuB,CAAC;;;;;;;;;;;YAW1C,EAAE,EAAc,kBAAkB,CAAC;;;;;YAKnC,EAAE,EAAc,kBAAkB,CAAC;;;;;;;YAOnC,EAAE,EAAc,kBAAkB,CAAC;;;;;;;;sBAQzB,EAAE,EAAc,oBAAoB,CAAC;;;QAGnD,CAAC,AACL,CAEA,yBAAyB,CAAI,CAAE,CAAQ,CAAE,CAAQ,CAAE,CAC7C,IAAa,IACf,IAAI,CAAC,EAAK,CAAG,EACb,IAAI,CAAC,MAAM,GAEf,CAEA,mBAAoB,CAClB,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,UAAU,CACZ,aAAa,CAAC,QACd,gBAAgB,CAAC,aAAc,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EACnE,CAEA,kBAAmB,CACjB,IAAM,EAAgB,IAAI,CAAC,UAAU,CAClC,aAAa,CAAC,QACd,aAAa,GAEhB,EAAc,OAAO,CAAC,AAAC,IACrB,GACE,EAAK,SAAS,EACd,EAAK,SAAS,CAAC,QAAQ,CAAC,EAAc,eAAe,EACrD,CACA,IAAM,EAAY,IAAI,CAAC,IAAI,CAAC,YAAa,QACnC,EAAa,IAAI,CAAC,IAAI,CAAC,aAAc,QAEvC,GAAa,IACf,EAAK,KAAK,CAAC,KAAK,CAAG,EACnB,EAAK,KAAK,CAAC,MAAM,CAAG,GAGtB,IAAM,EAAa,EAAK,aAAa,CAAC,OAElC,IACF,EAAW,KAAK,CAAC,SAAS,CAAG,UAC7B,EAAW,KAAK,CAAC,QAAQ,CAAG,OAC5B,EAAW,KAAK,CAAC,SAAS,CAAG,OAC7B,EAAW,KAAK,CAAC,aAAa,CAAG,SAErC,CACF,EACF,CAEA,QAAS,CACP,IAAI,CAAC,UAAU,CAAC,SAAS,CAAG,IAAI,CAAC,QAAQ,AAC3C,CACF,CAEA,eAAe,MAAM,CAAC,kBAAmB,EAEzC,2BAA0B,EAE1B;;;;;;;;;;;;;;EAcA,EACF,C,0C","sources":["<anon>","src/list/index.js"],"sourcesContent":["{\n    class SqsCustomList extends HTMLElement {\n        static get observedAttributes() {\n            return [\n                \"flexDirection\",\n                \"alignItems\",\n                \"justifyContent\",\n                \"itemWidth\",\n                \"itemHeight\",\n                \"gap\"\n            ];\n        }\n        static LIST_CONTAINER_CLASS = \"sqs-custom-list-container\";\n        static LIST_ITEM_CLASS = \"sqs-custom-list-item\";\n        static LIST_CONTAINER_SELECTOR = `.${SqsCustomList.LIST_CONTAINER_CLASS}`;\n        static LIST_ITEM_SELECTOR = `.${SqsCustomList.LIST_ITEM_CLASS}`;\n        constructor(){\n            super();\n            this.attachShadow({\n                mode: \"open\"\n            });\n        }\n        attr(name, defaultValue) {\n            return this.getAttribute(name) || defaultValue;\n        }\n        get template() {\n            const flexDirection = this.attr(\"flexDirection\", \"row\");\n            const alignItems = this.attr(\"alignItems\", \"stretch\");\n            const justifyContent = this.attr(\"justifyContent\", \"flex-start\");\n            const gap = this.attr(\"gap\", \"0\");\n            return `\n          <style>\n            * {\n              box-sizing: border-box;\n            }\n            ${SqsCustomList.LIST_CONTAINER_SELECTOR} {\n              display: flex;\n              margin: 0;\n              padding: 0;\n              list-style-type: none;\n              flex-direction: ${flexDirection};\n              align-items: ${alignItems};\n              justify-content: ${justifyContent};\n              gap: ${gap};\n              flex-wrap: nowrap;\n              height: 100%;\n              width: 100%;\n            }\n            @media screen and (max-width: 600px) {\n              ${SqsCustomList.LIST_CONTAINER_SELECTOR} {\n                flex-direction: column;\n                align-items: flex-start;\n                justify-content: center;\n                gap: initial;\n                flex-wrap: wrap;\n                border: 1px solid blue;\n                height: auto;\n                flex: 1;\n              }\n            }\n            ${SqsCustomList.LIST_ITEM_SELECTOR} {\n              display: flex;\n              // flex: 1;\n              text-align: center;\n            }\n            ${SqsCustomList.LIST_ITEM_SELECTOR} a {\n              display: block;\n              width: 100%;\n              height: 100%;\n              box-sizing: border-box;\n              position: relative;\n            }\n            ${SqsCustomList.LIST_ITEM_SELECTOR} img {\n              max-width: 100%;\n              max-height: 100%;\n              object-fit: contain;\n              vertical-align: middle;\n            }\n          </style>\n          \n          <div class=\"${SqsCustomList.LIST_CONTAINER_CLASS}\">\n            <slot></slot>\n          </div>\n        `;\n        }\n        attributeChangedCallback(name, oldValue, newValue) {\n            if (oldValue !== newValue) {\n                this[name] = newValue;\n                this.render();\n            }\n        }\n        connectedCallback() {\n            this.render();\n            this.shadowRoot.querySelector(\"slot\").addEventListener(\"slotchange\", this.handleSlotChange.bind(this));\n        }\n        handleSlotChange() {\n            const assignedNodes = this.shadowRoot.querySelector(\"slot\").assignedNodes();\n            assignedNodes.forEach((node)=>{\n                if (node.classList && node.classList.contains(SqsCustomList.LIST_ITEM_CLASS)) {\n                    const itemWidth = this.attr(\"itemWidth\", \"auto\");\n                    const itemHeight = this.attr(\"itemHeight\", \"auto\");\n                    if (itemWidth && itemHeight) {\n                        node.style.width = itemWidth;\n                        node.style.height = itemHeight;\n                    }\n                    const imgElement = node.querySelector(\"img\");\n                    if (imgElement) {\n                        imgElement.style.objectFit = \"contain\";\n                        imgElement.style.maxWidth = \"100%\";\n                        imgElement.style.maxHeight = \"100%\";\n                        imgElement.style.verticalAlign = \"middle\";\n                    }\n                }\n            });\n        }\n        render() {\n            this.shadowRoot.innerHTML = this.template;\n        }\n    }\n    customElements.define(\"sqs-custom-list\", SqsCustomList);\n/* Usage remains the same */ /*\n  How to use it:\n  \n  <sqs-custom-list \n    flexDirection=\"column\" \n    alignItems=\"center\" \n    justifyContent=\"space-around\" \n    itemWidth=\"100px\" \n    itemHeight=\"50px\" \n    gap=\"10px\">\n      <div class=\"${SqsCustomList.LIST_ITEM_CLASS}\">Item 1</div>\n      <div class=\"${SqsCustomList.LIST_ITEM_CLASS}\">Item 2</div>\n      <div class=\"${SqsCustomList.LIST_ITEM_CLASS}\">Item 3</div>\n  </sqs-custom-list>\n  */ }\n//# sourceMappingURL=index.e2d84658.js.map\n","{\n  class SqsCustomList extends HTMLElement {\n    static get observedAttributes() {\n      return [\n        \"flexDirection\",\n        \"alignItems\",\n        \"justifyContent\",\n        \"itemWidth\",\n        \"itemHeight\",\n        \"gap\",\n      ];\n    }\n\n    static LIST_CONTAINER_CLASS = \"sqs-custom-list-container\";\n    static LIST_ITEM_CLASS = \"sqs-custom-list-item\";\n    static LIST_CONTAINER_SELECTOR = `.${SqsCustomList.LIST_CONTAINER_CLASS}`;\n    static LIST_ITEM_SELECTOR = `.${SqsCustomList.LIST_ITEM_CLASS}`;\n\n    constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n    }\n\n    attr(name, defaultValue) {\n      return this.getAttribute(name) || defaultValue;\n    }\n\n    get template() {\n      const flexDirection = this.attr(\"flexDirection\", \"row\");\n      const alignItems = this.attr(\"alignItems\", \"stretch\");\n      const justifyContent = this.attr(\"justifyContent\", \"flex-start\");\n      const gap = this.attr(\"gap\", \"0\");\n\n      return `\n          <style>\n            * {\n              box-sizing: border-box;\n            }\n            ${SqsCustomList.LIST_CONTAINER_SELECTOR} {\n              display: flex;\n              margin: 0;\n              padding: 0;\n              list-style-type: none;\n              flex-direction: ${flexDirection};\n              align-items: ${alignItems};\n              justify-content: ${justifyContent};\n              gap: ${gap};\n              flex-wrap: nowrap;\n              height: 100%;\n              width: 100%;\n            }\n            @media screen and (max-width: 600px) {\n              ${SqsCustomList.LIST_CONTAINER_SELECTOR} {\n                flex-direction: column;\n                align-items: flex-start;\n                justify-content: center;\n                gap: initial;\n                flex-wrap: wrap;\n                border: 1px solid blue;\n                height: auto;\n                flex: 1;\n              }\n            }\n            ${SqsCustomList.LIST_ITEM_SELECTOR} {\n              display: flex;\n              // flex: 1;\n              text-align: center;\n            }\n            ${SqsCustomList.LIST_ITEM_SELECTOR} a {\n              display: block;\n              width: 100%;\n              height: 100%;\n              box-sizing: border-box;\n              position: relative;\n            }\n            ${SqsCustomList.LIST_ITEM_SELECTOR} img {\n              max-width: 100%;\n              max-height: 100%;\n              object-fit: contain;\n              vertical-align: middle;\n            }\n          </style>\n          \n          <div class=\"${SqsCustomList.LIST_CONTAINER_CLASS}\">\n            <slot></slot>\n          </div>\n        `;\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (oldValue !== newValue) {\n        this[name] = newValue;\n        this.render();\n      }\n    }\n\n    connectedCallback() {\n      this.render();\n      this.shadowRoot\n        .querySelector(\"slot\")\n        .addEventListener(\"slotchange\", this.handleSlotChange.bind(this));\n    }\n\n    handleSlotChange() {\n      const assignedNodes = this.shadowRoot\n        .querySelector(\"slot\")\n        .assignedNodes();\n\n      assignedNodes.forEach((node) => {\n        if (\n          node.classList &&\n          node.classList.contains(SqsCustomList.LIST_ITEM_CLASS)\n        ) {\n          const itemWidth = this.attr(\"itemWidth\", \"auto\");\n          const itemHeight = this.attr(\"itemHeight\", \"auto\");\n\n          if (itemWidth && itemHeight) {\n            node.style.width = itemWidth;\n            node.style.height = itemHeight;\n          }\n\n          const imgElement = node.querySelector(\"img\");\n\n          if (imgElement) {\n            imgElement.style.objectFit = \"contain\";\n            imgElement.style.maxWidth = \"100%\";\n            imgElement.style.maxHeight = \"100%\";\n            imgElement.style.verticalAlign = \"middle\";\n          }\n        }\n      });\n    }\n\n    render() {\n      this.shadowRoot.innerHTML = this.template;\n    }\n  }\n\n  customElements.define(\"sqs-custom-list\", SqsCustomList);\n\n  /* Usage remains the same */\n\n  /*\n  How to use it:\n  \n  <sqs-custom-list \n    flexDirection=\"column\" \n    alignItems=\"center\" \n    justifyContent=\"space-around\" \n    itemWidth=\"100px\" \n    itemHeight=\"50px\" \n    gap=\"10px\">\n      <div class=\"${SqsCustomList.LIST_ITEM_CLASS}\">Item 1</div>\n      <div class=\"${SqsCustomList.LIST_ITEM_CLASS}\">Item 2</div>\n      <div class=\"${SqsCustomList.LIST_ITEM_CLASS}\">Item 3</div>\n  </sqs-custom-list>\n  */\n}\n"],"names":["SqsCustomList","HTMLElement","observedAttributes","LIST_CONTAINER_CLASS","LIST_ITEM_CLASS","LIST_CONTAINER_SELECTOR","LIST_ITEM_SELECTOR","constructor","attachShadow","mode","attr","name","defaultValue","getAttribute","template","flexDirection","alignItems","justifyContent","gap","attributeChangedCallback","oldValue","newValue","render","connectedCallback","shadowRoot","querySelector","addEventListener","handleSlotChange","bind","assignedNodes","forEach","node","classList","contains","itemWidth","itemHeight","style","width","height","imgElement","objectFit","maxWidth","maxHeight","verticalAlign","innerHTML","customElements","define"],"version":3,"file":"index.e2d84658.js.map"}